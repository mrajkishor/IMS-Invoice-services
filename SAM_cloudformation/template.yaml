AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  UsersTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Customers
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: mobile
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: MobileIndex   # index for mobile number queries
          KeySchema:
            - AttributeName: mobile
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ShopsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Shops
      AttributeDefinitions:
        - AttributeName: shopId
          AttributeType: S
      KeySchema:
        - AttributeName: shopId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  InvoicesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Invoices
      AttributeDefinitions:
        - AttributeName: invoiceId
          AttributeType: S
        - AttributeName: shopId
          AttributeType: S
      KeySchema:
        - AttributeName: invoiceId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ShopIdIndex
          KeySchema:
            - AttributeName: shopId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5


  # Custom Role Without CloudWatch Permissions (Disabling logs to avoid costs- Temporary)
  LambdaExecutionRoleWithoutLogs:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "DynamoDBAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Customers"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Shops"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Invoices"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Customers/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Shops/index/*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Invoices/index/*"
      Path: "/"


  AuthLoginFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.AuthHandler::handleLoginRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Login:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post

  AuthLogoutFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.AuthHandler::handleLogoutRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Logout:
          Type: Api
          Properties:
            Path: /auth/logout
            Method: post

  AuthRefreshFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.AuthHandler::handleRefreshRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        Refresh:
          Type: Api
          Properties:
            Path: /auth/refresh
            Method: post

  CreateUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.UserHandler::handleCreateUserRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        CreateUser:
          Type: Api
          Properties:
            Path: /users
            Method: post

  GetUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.UserHandler::handleGetUserRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: get

  UpdateUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.UserHandler::handleUpdateUserRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: put

  DeleteUserFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.UserHandler::handleDeleteUserRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Events:
        DeleteUser:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: delete

  CreateShopFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.ShopHandler::handleCreateShopRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ShopsTable
      Events:
        CreateShop:
          Type: Api
          Properties:
            Path: /shops
            Method: post

  GetShopFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.ShopHandler::handleGetShopRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ShopsTable
      Events:
        GetShop:
          Type: Api
          Properties:
            Path: /shops/{shopId}
            Method: get

  GetAllShopsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.ShopHandler::handleGetAllShopsRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ShopsTable
      Events:
        GetAllShops:
          Type: Api
          Properties:
            Path: /users/{userId}/shops
            Method: get

  UpdateShopFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.ShopHandler::handleUpdateShopRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ShopsTable
      Events:
        UpdateShop:
          Type: Api
          Properties:
            Path: /shops/{shopId}
            Method: put

  DeleteShopFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.ShopHandler::handleDeleteShopRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref ShopsTable
      Events:
        DeleteShop:
          Type: Api
          Properties:
            Path: /shops/{shopId}
            Method: delete

  CreateInvoiceFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.InvoiceHandler::handleCreateInvoiceRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        CreateInvoice:
          Type: Api
          Properties:
            Path: /invoices
            Method: post

  GetInvoiceFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.InvoiceHandler::handleGetInvoiceRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        GetInvoice:
          Type: Api
          Properties:
            Path: /invoices/{invoiceId}
            Method: get
  GetInvoicesByShopFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.InvoiceHandler::handleGetInvoicesByShopRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        GetInvoicesByShop:
          Type: Api
          Properties:
            Path: /shops/{shopId}/invoices
            Method: get
            
  UpdateInvoiceFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.InvoiceHandler::handleUpdateInvoiceRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        UpdateInvoice:
          Type: Api
          Properties:
            Path: /invoices/{invoiceId}
            Method: put

  DeleteInvoiceFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.InvoiceHandler::handleDeleteInvoiceRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        DeleteInvoice:
          Type: Api
          Properties:
            Path: /invoices/{invoiceId}
            Method: delete

  GetShopHistoryFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: com.ims.invoice.HistoryHandler::handleGetShopHistoryRequest
      Runtime: java17
      CodeUri: .
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt LambdaExecutionRoleWithoutLogs.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref InvoicesTable
      Events:
        GetShopHistory:
          Type: Api
          Properties:
            Path: /shops/{shopId}/history
            Method: get
